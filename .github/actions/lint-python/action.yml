name: Lint Python
description: Performs linting in Python Project
inputs:
  baseDir:
    description: Path to base directory
    required: true
  python-version:
    description: Python version
    required: true
  voxel-pip-registry-token:
    description: Token to use in voxel pip registry
    required: true

runs:
  using: "composite"
  steps:
    - name: Set up Python ${{ inputs.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python-version }}
        cache: "pip"
        cache-dependency-path: |
          **/requirements*.txt

    - name: Install pip dependencies ${{ inputs.baseDir }}
      env:
        TOKEN: ${{ inputs.voxel-pip-registry-token }}
      shell: bash
      run: |
        echo "::group::requirements-installation"
        python -m pip install --upgrade pip
        python -m pip install autopep8 pylint mypy
        trap popd EXIT
        pushd ${{ inputs.baseDir }}
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements_dev.txt ]; then pip install -r requirements_dev.txt; fi
        echo "::endgroup::"

        echo "::group::list-packages"
        pip list
        echo "::endgroup::"

    - name: Configure problem matchers
      shell: bash
      run: |
        echo "::add-matcher::${GITHUB_ACTION_PATH}/pylint-error.json"
        echo "::add-matcher::${GITHUB_ACTION_PATH}/pylint-warning.json"
        echo "::add-matcher::${GITHUB_ACTION_PATH}/mypy.json"

    - name: Autopep8 ${{ inputs.baseDir }}
      shell: bash
      id: autopep-check
      continue-on-error: true
      run: |
        trap popd EXIT
        pushd ${{ inputs.baseDir }}

        echo "::group::autopep8-results"
        autopep8 --exit-code .
        echo "::endgroup::"

    - name: Pylint ${{ inputs.baseDir }}
      shell: bash
      id: pylint-check
      continue-on-error: true
      run: |
        trap popd EXIT
        pushd ${{ inputs.baseDir }}

        echo "::group::pylint-results"
        pylint --output-format="colorized" .
        echo "::endgroup::"

    - name: Mypy ${{ inputs.baseDir }}
      shell: bash
      id: mypy-check
      continue-on-error: true
      run: |
        trap popd EXIT
        pushd ${{ inputs.baseDir }}

        mkdir -p .mypy_cache

        echo "::group::mypy-results"
        mypy --install-types --non-interactive --show-column-numbers --show-error-codes ./
        echo "::endgroup::"

    - name: Check for linter failures
      shell: bash
      if: ${{ steps.autopep-check.outcome != 'success' || steps.pylint-check.outcome != 'success' || steps.mypy-check.outcome != 'success' }}
      run: exit 1
