name: Scan code

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - master

jobs:
  pre-commit:
    name: Pre-commit checks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Pre-commit check
      uses: pre-commit/action@v3.0.0

  list-directories:
    name: List directories to test
    runs-on: ubuntu-latest
    outputs:
      directories: ${{ steps.list-step.outputs.directories }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get directories to test
        id: list-step
        run: |
          DIRS="["
          for i in $(ls -d */); do
            if ls ${i%%/} | grep -q "tests"; then
              DIRS+="\"${i%%/}\","
            fi
          done
          DIRS+="]"
          echo "List of directories to test: $DIRS"
          echo "::set-output name=directories::$DIRS"

  run-pytest:
    name: Run pytest
    runs-on: ubuntu-latest
    needs: [list-directories]
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9.12"]
        service: ${{ fromJSON(needs.list-directories.outputs.directories) }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: |
            **/requirements*.txt

      - name: Install pip dependencies ${{ matrix.service }}
        env:
          TOKEN: ${{ secrets.FIFTYONE_TOKEN }}
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest pytest-cov
          trap popd EXIT
          pushd ${{ matrix.service }}
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements_dev.txt ]; then pip install -r requirements_dev.txt; fi

      - name: Test ${{ matrix.service }} with pytest
        continue-on-error: true
        id: pytest
        run: |
          pushd ${{ matrix.service }}
          trap popd EXIT
          python -m pytest

      - name: Fix code coverage paths
        # Necessary step to correct source paths, since sonar scanner works from a Docker container and has a different path structure from github
        run: |
          sed -i 's/\/home\/runner\/work\/container_scripts\/container_scripts\//\/github\/workspace\//g' ${{ matrix.service }}/coverage.xml

      - name: Persist ${{ matrix.service }} coverage report
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.service }}-coverage-report
          path: ${{ matrix.service }}/coverage.xml

      - name: Mark test status
        if: steps.pytest.outcome != 'success'
        run: exit 1

  sonarqube-scan:
    name: Sonarqube scan on code
    runs-on: ubuntu-latest
    needs: [run-pytest]
    if: success() || failure()
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get coverage reports
        uses: actions/download-artifact@v3

      - name: Sonarqube scan
        id: sonarqube-scan
        uses: ./.github/actions/scan-code
        timeout-minutes: 5
        with:
          baseDir: "./"
          url: ${{ secrets.SONAR_HOST_URL }}
          token: ${{ secrets.SONAR_TOKEN }}
          args:  >
            -Dsonar.pullrequest.key=${{ github.event.number }}
            -Dsonar.pullrequest.branch=${{ github.head_ref }}
            -Dsonar.pullrequest.base=master

      - name: Sonarqube quality gate status
        run: "echo quality gate result: ${{steps.sonarqube-scan.outputs.scan-success}}"
