name: Master Pipeline

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      services:
        description: Services to build separated by comma, leave empty for all
        required: false

env:
  AWS_DEFAULT_REGION: eu-central-1
  AWS_ROLE: arn:aws:iam::081962623310:role/github-oidc-access
  EXCLUDED_DIRS: '[".git", ".github", ".vscode", ".localdev", "base", "basehandler"]'
  GITHUB_ACTIONS_USER: "GitHub Actions"
  GITHUB_ACTIONS_EMAIL: "<41898282+github-actions[bot]@users.noreply.github.com>"

permissions:
  id-token: write
  contents: write

jobs:
  pre-commit:
    name: Pre-commit checks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Pre-commit check
      uses: pre-commit/action@v3.0.0

  list-all-service-directories:
    name: List directories to lint and test
    if: success() || failure() # making lint optional for now
    needs: [pre-commit]
    runs-on: ubuntu-latest
    outputs:
      python-directories: ${{ steps.list-step.outputs.python-directories }}
      javascript-directories: ${{ steps.list-step.outputs.javascript-directories }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - id: list-step
        uses: ./.github/actions/list-all-service-directories

  lint-python-projects:
    name: Lint Python
    runs-on: ubuntu-latest
    needs: [list-all-service-directories]
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9.12"]
        service: ${{ fromJSON(needs.list-all-service-directories.outputs.python-directories) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: ./.github/actions/lint-python
        with:
          baseDir: ${{ matrix.service }}
          python-version: ${{ matrix.python-version }}
          voxel-pip-registry-token: ${{ secrets.FIFTYONE_TOKEN }}


  lint-javascript-projects:
    name: Lint Javascript
    runs-on: ubuntu-latest
    needs: [list-all-service-directories]
    strategy:
      fail-fast: false
      matrix:
        node-version: ["18.x"]
        service: ${{ fromJSON(needs.list-all-service-directories.outputs.javascript-directories) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: ./.github/actions/lint-javascript
        with:
          baseDir: ${{ matrix.service }}
          node-version: ${{ matrix.node-version }}
          npm-registry: https://artifactory.boschdevcloud.com/artifactory/api/npm/lab000003-bci-npm-virtual/
          npm-auth: ${{ secrets.NPM_AUTH }}
          npm-email: ${{ secrets.NPM_EMAIL }}

  run-python-sast:
    name: SAST Python
    runs-on: ubuntu-latest
    if: success() || failure() # making SAST optional for now
    needs: [list-all-service-directories]
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9.12"]
        service: ${{ fromJSON(needs.list-all-service-directories.outputs.python-directories) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: ./.github/actions/sast-python
        with:
          baseDir: ${{ matrix.service }}
          python-version: ${{ matrix.python-version }}

  run-python-tests:
    name: Unit tests
    runs-on: ubuntu-latest
    if: success() || failure() # making lint optional for now
    needs: [list-all-service-directories]
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9.12"]
        service: ${{ fromJSON(needs.list-all-service-directories.outputs.python-directories) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: ./.github/actions/test-python
        name: Run unit tests
        with:
          baseDir: ${{ matrix.service }}
          python-version: ${{ matrix.python-version }}
          voxel-pip-registry-token: ${{ secrets.FIFTYONE_TOKEN }}

  run-python-integration-tests:
    name: Integration tests
    runs-on: ubuntu-latest
    if: success() || failure() # making lint optional for now
    needs: [list-all-service-directories]
    services:
      localstack:
        image: localstack/localstack:latest
        env:
          SERVICES: sqs,sns,s3
          DEFAULT_REGION: eu-west-1
          AWS_ACCESS_KEY_ID: localkey
          AWS_SECRET_ACCESS_KEY: localsecret
        ports:
          - 4566:4566
          - 4571:4571
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9.12"]
        service: ${{ fromJSON(needs.list-all-service-directories.outputs.python-directories) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: ./.github/actions/test-python
        name: Run integration tests
        with:
          baseDir: ${{ matrix.service }}
          python-version: ${{ matrix.python-version }}
          voxel-pip-registry-token: ${{ secrets.FIFTYONE_TOKEN }}
          extra-pytest-args: -m integration
          mode: integration

  run-javascript-tests:
    name: Javascript tests
    runs-on: ubuntu-latest
    if: success() || failure() # making lint optional for now
    needs: [list-all-service-directories]
    strategy:
      fail-fast: false
      matrix:
        node-version: ["18.x"]
        service: ${{ fromJSON(needs.list-all-service-directories.outputs.javascript-directories) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: ./.github/actions/test-javascript
        with:
          baseDir: ${{ matrix.service }}
          node-version: ${{ matrix.node-version }}
          npm-registry: https://artifactory.boschdevcloud.com/artifactory/api/npm/lab000003-bci-npm-virtual/
          npm-auth: ${{ secrets.NPM_AUTH }}
          npm-email: ${{ secrets.NPM_EMAIL }}

  sonarqube-scan:
    name: Sonarqube scan on code
    runs-on: ubuntu-latest
    needs: [run-python-tests, run-javascript-tests, run-python-sast]
    if: success() || failure()
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get static analysis and coverage reports
        uses: actions/download-artifact@v3

      - name: Collect SAST reports
        id: sast-reports
        run: |
          echo "::set-output name=report-paths::$(ls --format=commas *-security-report/*.json | tr -s '[:blank:]' ',' | tr -d '\n')"

      - name: Sonarqube scan
        id: sonarqube-scan
        uses: ./.github/actions/scan-code
        timeout-minutes: 5
        with:
          baseDir: "./"
          url: ${{ secrets.SONAR_HOST_URL }}
          token: ${{ secrets.SONAR_TOKEN }}
          args:  >
            -Dsonar.python.bandit.reportPaths=${{ steps.sast-reports.outputs.report-paths }}
            -Dsonar.branch.name=${{ github.ref_name }}

      - name: Sonarqube quality gate status
        run: "echo quality gate result: ${{steps.sonarqube-scan.outputs.scan-success}}"

  determine-changed-services:
    name: Determine which services to build
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.changed-services.outputs.services }}
      git-tag: ${{ steps.git-tag-push.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Determine services to build
        id: changed-services
        env:
          # Compare pushes to master with event.before and branch builds with master
          GITHUB_EVENT_BEFORE: ${{ github.ref_name == 'master' && github.event.before || 'origin/master' }}
          GITHUB_EVENT_AFTER: ${{ github.event.after }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          INPUT_SERVICES: ${{ inputs.services }}
        run: python ./.github/workflows/determine_services_to_build.py

      - name: Git tag & push
        id: git-tag-push
        if: steps.changed-services.outputs.services != '[]'
        run: |
          TAG=$(date +%F)-$(git rev-parse --short HEAD)
          if [ '${{ github.ref_name }}' != 'master' ]; then
            SANITIZED_BRANCH_NAME=$(echo ${{ github.ref_name }} | tr '/' '-' | tr -dc '[:alnum:]-' | tr '[:upper:]' '[:lower:]')
            TAG=$TAG-$SANITIZED_BRANCH_NAME
          fi
          echo "Using this git tag: $TAG"
          git config --local user.email ${GITHUB_ACTIONS_EMAIL}
          git config --local user.name ${GITHUB_ACTIONS_USER}
          git tag -f -a $TAG -m "Created on $(date +'%F %T')"
          git push origin $TAG -f
          echo "::set-output name=tag::$TAG"

      - name: Add summary
        if: steps.changed-services.outputs.services == '[]'
        run: |
          echo "No service change detected, nothing to build." >> $GITHUB_STEP_SUMMARY


  build-image:
    needs: [determine-changed-services]
    name: Build image for
    runs-on: ubuntu-latest
    if: needs.determine-changed-services.outputs.services != '[]'
    strategy:
      fail-fast: false
      matrix:
        service: ${{fromJSON(needs.determine-changed-services.outputs.services)}}
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: ${{ env.AWS_ROLE }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1.5.3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.service }}-${{ github.sha }}
          # If no cache is found for exact key, search in previous commits for cache on same service and other services
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.service }}-
            ${{ runner.os }}-buildx-

      - name: Prepare environment vars
        id: prepare-tag
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          SERVICE_LOWERCASE=$(echo ${{ matrix.service }} | tr '[:upper:]' '[:lower:]')
          TAG=$ECR_REGISTRY/$SERVICE_LOWERCASE:${{ needs.determine-changed-services.outputs.git-tag }}

          echo ::set-output name=tag::${TAG}

      - name: Build and push image to Amazon ECR
        id: build-image
        uses: docker/build-push-action@v4
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.prepare-tag.outputs.tag }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          secrets: |
            voxel51token=${{ secrets.FIFTYONE_TOKEN }}
          build-args: |
            NPM_AUTH=${{ secrets.NPM_AUTH }}
            NPM_EMAIL=${{ secrets.NPM_EMAIL}}

        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache



  update-image-tag:
    name: Update image tags in dev K8s manifests
    if: github.ref_name == 'master'
    needs: [build-image, determine-changed-services]
    runs-on: ubuntu-latest
    env:
      ECR_REPO: 081962623310.dkr.ecr.eu-central-1.amazonaws.com
      NEW_TAG: ${{ needs.determine-changed-services.outputs.git-tag }}

    steps:
      - name: Checkout kubernetes_config
        uses: actions/checkout@v3
        with:
          repository: bosch-rc-dev/kubernetes_config
          ssh-key: ${{ secrets.K8S_CONFIG_SSH_KEY }}

      - name: Update image tags on kubernetes_config
        run: |
          echo "New image tags:" >> $GITHUB_STEP_SUMMARY

          SERVICES=${{ toJson(needs.determine-changed-services.outputs.services) }}
          echo $SERVICES | jq -c '.[]' | tr -d '\"' | while read SERVICE; do
            SERVICE_LOWER=$(echo $SERVICE | tr '[:upper:]' '[:lower:]')
            SERVICE_UPPER=$(echo $SERVICE | tr '[:lower:]' '[:upper:]')
            pushd apps/dev/$SERVICE_LOWER/ > /dev/null

            echo "${SERVICE}: ${ECR_REPO}/${SERVICE_LOWER}:${NEW_TAG}" >> $GITHUB_STEP_SUMMARY

            kustomize edit set image "<CONTAINER_IMAGE_TAG_${SERVICE_UPPER}>=${ECR_REPO}/${SERVICE_LOWER}:${NEW_TAG}"
            echo "##### ${SERVICE}: Updated images in Kustomize file"
            echo
            cat kustomization.yaml
            echo
            git add kustomization.yaml
            popd > /dev/null
          done

      - name: Commit new image tags
        run: |
          git config --local user.email ${GITHUB_ACTIONS_EMAIL}
          git config --local user.name ${GITHUB_ACTIONS_USER}
          SERVICES=${{ toJson(needs.determine-changed-services.outputs.services) }}
          git commit --no-verify \
            -m "[Image Update] Update images to ${NEW_TAG}" \
            -m "Updated services: '${SERVICES}'" \
            -m "Images are using code of Git tag https://github.com/bosch-rc-dev/container_scripts/tree/${NEW_TAG}"
          git push

          echo
          echo "Images updated on kubernetes_config: https://github.com/bosch-rc-dev/kubernetes_config/commit/$(git rev-parse --short HEAD)" >> $GITHUB_STEP_SUMMARY
