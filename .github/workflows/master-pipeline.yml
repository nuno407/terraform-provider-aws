name: Master Pipeline

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      services:
        description: Services to build separated by comma, leave empty for all
        required: false
      test:
        type: boolean
        description: Run tests
        default: false
      lint:
        type: boolean
        description: Run linting
        default: false
      sast:
        type: boolean
        description: Run sast
        default: false
      build-image:
        type: boolean
        description: Build image
        default: true
      update-images:
        type: boolean
        default: true
        description: Create k8s-config branch with updated images

env:
  AWS_DEFAULT_REGION: eu-central-1
  AWS_ROLE: arn:aws:iam::081962623310:role/github-oidc-access
  GITHUB_ACTIONS_USER: "GitHub Actions"
  GITHUB_ACTIONS_EMAIL: "<41898282+github-actions[bot]@users.noreply.github.com>"

permissions:
  id-token: write
  contents: write

jobs:
  pre-commit:
    name: Pre-commit checks
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Pre-commit check
      uses: pre-commit/action@v3.0.0

  lint-python-projects:
    name: Lint Python
    runs-on: ubuntu-22.04
    if: github.ref_name == 'master' || inputs.lint
    needs: [determine-changed-services]
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]
        service: ${{ fromJSON(needs.determine-changed-services.outputs.python-directories) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: bosch-rc-dev/actions/lint-python@main
        with:
          baseDir: ${{ matrix.service }}
          python-version: ${{ matrix.python-version }}
          voxel-pip-registry-token: ${{ secrets.FIFTYONE_TOKEN }}


  lint-javascript-projects:
    name: Lint Javascript
    runs-on: ubuntu-22.04
    if: github.ref_name == 'master' || inputs.lint
    needs: [determine-changed-services]
    strategy:
      fail-fast: false
      matrix:
        node-version: ["18.x"]
        service: ${{ fromJSON(needs.determine-changed-services.outputs.javascript-directories) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: bosch-rc-dev/actions/lint-javascript@main
        with:
          baseDir: ${{ matrix.service }}
          node-version: ${{ matrix.node-version }}
          npm-registry: https://artifactory.boschdevcloud.com/artifactory/api/npm/lab000003-bci-npm-virtual/
          npm-auth: ${{ secrets.NPM_AUTH }}
          npm-email: ${{ secrets.NPM_EMAIL }}

  run-python-sast:
    name: SAST Python
    runs-on: ubuntu-22.04
    if: github.ref_name == 'master' || inputs.sast
    needs: [determine-changed-services]
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]
        service: ${{ fromJSON(needs.determine-changed-services.outputs.python-directories) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: bosch-rc-dev/actions/sast-python@main
        with:
          baseDir: ${{ matrix.service }}
          python-version: ${{ matrix.python-version }}

  run-python-tests:
    name: Unit tests
    runs-on: ubuntu-22.04
    if: github.ref_name == 'master' || inputs.test
    needs: [determine-changed-services]
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]
        service: ${{ fromJSON(needs.determine-changed-services.outputs.python-directories) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: bosch-rc-dev/actions/test-python@main
        name: Run unit tests
        with:
          baseDir: ${{ matrix.service }}
          python-version: ${{ matrix.python-version }}
          voxel-pip-registry-token: ${{ secrets.FIFTYONE_TOKEN }}

  run-python-integration-tests:
    name: Integration tests
    runs-on: ubuntu-22.04
    if: github.ref_name == 'master' || inputs.test
    needs: [determine-changed-services]
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]
        service: ${{ fromJSON(needs.determine-changed-services.outputs.python-directories) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: bosch-rc-dev/actions/test-python@main
        name: Run integration tests
        with:
          baseDir: ${{ matrix.service }}
          python-version: ${{ matrix.python-version }}
          voxel-pip-registry-token: ${{ secrets.FIFTYONE_TOKEN }}
          extra-pytest-args: -m integration
          mode: integration

  run-javascript-tests:
    name: Javascript tests
    runs-on: ubuntu-22.04
    if: github.ref_name == 'master' || inputs.test
    needs: [determine-changed-services]
    strategy:
      fail-fast: false
      matrix:
        node-version: ["18.x"]
        service: ${{ fromJSON(needs.determine-changed-services.outputs.javascript-directories) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: bosch-rc-dev/actions/test-javascript@main
        with:
          baseDir: ${{ matrix.service }}
          node-version: ${{ matrix.node-version }}
          npm-registry: https://artifactory.boschdevcloud.com/artifactory/api/npm/lab000003-bci-npm-virtual/
          npm-auth: ${{ secrets.NPM_AUTH }}
          npm-email: ${{ secrets.NPM_EMAIL }}

  sonarqube-scan:
    name: Sonarqube scan on code
    runs-on: ubuntu-22.04
    needs: [run-python-tests, run-javascript-tests, run-python-sast]
    if: github.ref_name == 'master' || inputs.test
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get static analysis and coverage reports
        uses: actions/download-artifact@v3

      - name: Collect SAST reports
        id: sast-reports
        run: |
          echo "report-paths=$(ls --format=commas *-security-report/*.json | tr -s '[:blank:]' ',' | tr -d '\n')" >> $GITHUB_OUTPUT

      - name: Sonarqube scan
        id: sonarqube-scan
        uses: bosch-rc-dev/actions/scan-code@main
        timeout-minutes: 5
        with:
          baseDir: "./"
          url: ${{ secrets.SONAR_HOST_URL }}
          token: ${{ secrets.SONAR_TOKEN }}
          args:  >
            -Dsonar.python.bandit.reportPaths=${{ steps.sast-reports.outputs.report-paths }}
            -Dsonar.branch.name=${{ github.ref_name }}

      - name: Sonarqube quality gate status
        run: "echo quality gate result: ${{steps.sonarqube-scan.outputs.scan-success}}"

  determine-changed-services:
    name: Determine which services to build
    runs-on: ubuntu-22.04
    outputs:
      services: ${{ steps.changed-services.outputs.services }}
      needs-testing: ${{ steps.changed-services.outputs.needs-testing }}
      python-directories: ${{ steps.changed-services.outputs.python-directories }}
      javascript-directories: ${{ steps.changed-services.outputs.javascript-directories }}
      git-tag: ${{ steps.git-tag-push.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Determine services to build
        id: changed-services
        uses: bosch-rc-dev/actions/determine-services-to-build@main
        with:
          services: ${{ inputs.services }}

      - name: Git tag & push
        id: git-tag-push
        if: steps.changed-services.outputs.services != '[]'
        run: |
          TAG=$(date +%F)-$(git rev-parse --short HEAD)
          if [ '${{ github.ref_name }}' != 'master' ]; then
            SANITIZED_BRANCH_NAME=$(echo ${{ github.ref_name }} | tr '/' '-' | tr -dc '[:alnum:]-' | tr '[:upper:]' '[:lower:]')
            TAG=$TAG-$SANITIZED_BRANCH_NAME
          fi
          echo "Using this git tag: $TAG"
          git config --local user.email ${GITHUB_ACTIONS_EMAIL}
          git config --local user.name ${GITHUB_ACTIONS_USER}
          git tag -f -a $TAG -m "Created on $(date +'%F %T')"
          git push origin $TAG -f
          echo "tag=$TAG" >> $GITHUB_OUTPUT

          echo "## New image tag" >> $GITHUB_STEP_SUMMARY
          echo "$TAG" >> $GITHUB_STEP_SUMMARY

      - name: Add summary
        if: steps.changed-services.outputs.services == '[]'
        run: |
          echo "No service change detected, nothing to build." >> $GITHUB_STEP_SUMMARY


  build-image:
    needs: [determine-changed-services]
    name: Build image for
    runs-on: ubuntu-22.04
    if: needs.determine-changed-services.outputs.services != '[]' && (github.ref_name == 'master' || inputs.build-image)
    strategy:
      fail-fast: false
      matrix:
        service: ${{fromJSON(needs.determine-changed-services.outputs.services)}}
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2.0.0
        with:
          role-to-assume: ${{ env.AWS_ROLE }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1.5.3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/amd64

      - name: Prepare environment vars
        id: prepare-tag
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          SERVICE_LOWERCASE=$(echo ${{ matrix.service }} | tr '[:upper:]' '[:lower:]')
          TAG=$ECR_REGISTRY/$SERVICE_LOWERCASE:${{ needs.determine-changed-services.outputs.git-tag }}

          echo "tag=${TAG}" >> $GITHUB_OUTPUT

      - name: Build and push image to Amazon ECR
        id: build-image
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64
          provenance: false
          builder: ${{ steps.buildx.outputs.name }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.prepare-tag.outputs.tag }}
          cache-from: type=gha,scope=${{ matrix.service }}
          cache-to: type=gha,scope=${{ matrix.service }},mode=max
          secrets: |
            voxel51token=${{ secrets.FIFTYONE_TOKEN }}
          build-args: |
            NPM_AUTH=${{ secrets.NPM_AUTH }}
            NPM_EMAIL=${{ secrets.NPM_EMAIL}}



  update-image-tag:
    name: Update image tags in dev K8s manifests
    if: github.ref_name == 'master' || inputs.update-images
    needs: [build-image, determine-changed-services]
    runs-on: ubuntu-22.04
    env:
      ECR_REPO: 081962623310.dkr.ecr.eu-central-1.amazonaws.com
      NEW_TAG: ${{ needs.determine-changed-services.outputs.git-tag }}

    steps:
      - name: Checkout kubernetes_config
        uses: actions/checkout@v3
        with:
          repository: bosch-rc-dev/kubernetes_config
          ssh-key: ${{ secrets.K8S_CONFIG_SSH_KEY }}

      - name: Update image tags on kubernetes_config
        run: |
          echo "New image tags:" >> $GITHUB_STEP_SUMMARY

          SERVICES=${{ toJson(needs.determine-changed-services.outputs.services) }}
          echo $SERVICES | jq -c '.[]' | tr -d '\"' | while read SERVICE; do
            SERVICE_LOWER=$(echo $SERVICE | tr '[:upper:]' '[:lower:]')
            SERVICE_UPPER=$(echo $SERVICE | tr '[:lower:]' '[:upper:]')
            pushd apps/dev/$SERVICE_LOWER/ > /dev/null

            echo "${SERVICE}: ${ECR_REPO}/${SERVICE_LOWER}:${NEW_TAG}" >> $GITHUB_STEP_SUMMARY

            kustomize edit set image "<CONTAINER_IMAGE_TAG_${SERVICE_UPPER}>=${ECR_REPO}/${SERVICE_LOWER}:${NEW_TAG}"
            echo "##### ${SERVICE}: Updated images in Kustomize file"
            echo
            cat kustomization.yaml
            echo
            git add kustomization.yaml
            popd > /dev/null
          done

      - name: Output branch information
        if: github.ref_name != 'master'
        run: |
          echo "## Testing on Dev" >> $GITHUB_STEP_SUMMARY
          echo 'Test branch created here: https://github.com/bosch-rc-dev/kubernetes_config/compare/master...${{ github.ref_name }}' >> $GITHUB_STEP_SUMMARY
          echo 'Name: `${{ github.ref_name }}`' >> $GITHUB_STEP_SUMMARY
          echo 'Note that a new image build will override all changes on this branch!' >> $GITHUB_STEP_SUMMARY
          echo 'To test on dev, you still need to change the branch on GitRepository flux-system' >> $GITHUB_STEP_SUMMARY
          echo 'Make sure to switch Flux back to master after testing and [delete your branch](https://github.com/bosch-rc-dev/kubernetes_config/branches/yours)' >> $GITHUB_STEP_SUMMARY

          # Update Flux branch
          sed -i 's@master@${{ github.ref_name }}@' clusters/dev/flux-system/gotk-sync.yaml

      - name: Commit image tags to branch
        if: github.ref_name != 'master'
        uses: EndBug/add-and-commit@v9
        with:
          new_branch: ${{ github.ref_name }}
          committer_email: ${GITHUB_ACTIONS_EMAIL}
          committer_name: ${GITHUB_ACTIONS_USER}
          default_author: github_actions
          push: origin ${{ github.ref_name }} --set-upstream --force
          message: "[Image test] Test branch images on dev"


      - name: Commit new image tags
        if: github.ref_name == 'master'
        run: |
          git config --local user.email ${GITHUB_ACTIONS_EMAIL}
          git config --local user.name ${GITHUB_ACTIONS_USER}
          SERVICES=${{ toJson(needs.determine-changed-services.outputs.services) }}
          git commit --no-verify \
            -m "[Image Update] Update images to ${NEW_TAG}" \
            -m "Updated services: '${SERVICES}'" \
            -m "Images are using code of Git tag https://github.com/bosch-rc-dev/container_scripts/tree/${NEW_TAG}"
          git push

          echo
          echo "Images updated on kubernetes_config: https://github.com/bosch-rc-dev/kubernetes_config/commit/$(git rev-parse --short HEAD)" >> $GITHUB_STEP_SUMMARY
